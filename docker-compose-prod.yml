version: "3.8"
volumes:
  db_data: {}
services:
  traefik:
    image: traefik:latest
    ports:
      - "80:80"
      - "443:443"
      - "90:90"
      - "85:85"
    command:
      - "--providers.docker=true"
      - "--providers.docker.swarmmode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.webinternal.address=:85"
      - "--entrypoints.web-secure.address=:443"
      - "--entrypoints.internal.address=:90"
      - "--entrypoints.web.http.redirections.entryPoint.to=web-secure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--certificatesresolvers.letsencryptresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencryptresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencryptresolver.acme.email=phillip@golem.network"
      - "--certificatesresolvers.letsencryptresolver.acme.storage=/letsencrypt/acme.json"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - --metrics.prometheus.entryPoint=metrics
      - --entryPoints.metrics.address=:8080
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=swarm-example"
      - "traefik.http.routers.traefik.middlewares=traefik-compress"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager
    networks:
      - swarm-example
  django:
    image: phillipjensen/payment-monitor-backend:latest
    env_file:
      - ./.envs/.django
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.django.rule=Host(`api.pmonitor.golem.network`)
        - traefik.http.routers.django.entrypoints=web
        - traefik.http.services.django.loadbalancer.server.port=8002
        - traefik.http.routers.django.service=django@docker
        - traefik.docker.network=swarm-example
        - traefik.http.routers.django.tls.certresolver=letsencryptresolver
        - traefik.http.routers.django-web-secure.rule=Host(`api.pmonitor.golem.network`)
        - traefik.http.routers.django-web-secure.tls=true
        - traefik.http.routers.django-web-secure.entrypoints=web-secure
        - traefik.http.middlewares.django_compress.compress=true
        - traefik.http.routers.django-web-secure.middlewares=django_compress
        - traefik.http.routers.django.middlewares=django_compress
      replicas: 3
      update_config:
        parallelism: 2
        failure_action: rollback
        delay: 2s
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
  nginx:
    image: phillipjensen/payment-monitor-nginx:latest
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.nginx.rule=Host(`pmonitor.golem.network`)
        - traefik.http.routers.nginx.entrypoints=web
        - traefik.http.services.nginx.loadbalancer.server.port=8002
        - traefik.http.routers.nginx.service=nginx@docker
        - traefik.docker.network=swarm-example
        - traefik.http.routers.nginx.tls.certresolver=letsencryptresolver
        - traefik.http.routers.nginx-web-secure.rule=Host(`pmonitor.golem.network`)
        - traefik.http.routers.nginx-web-secure.tls=true
        - traefik.http.routers.nginx-web-secure.entrypoints=web-secure
        - traefik.http.middlewares.nginx_compress.compress=true
        - traefik.http.routers.nginx-web-secure.middlewares=nginx_compress
        - traefik.http.routers.nginx.middlewares=nginx_compress
      replicas: 3
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 2s
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
  redis:
    image: "redis:alpine"
    command: [sh, -c, "rm -f /data/dump.rdb && redis-server --maxclients 40000 --timeout 60  --save ''"]
    expose:
      - "6379"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 10s
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
  celery:
    image: phillipjensen/payment-monitor-backend-celery:latest
    env_file:
      - ./.envs/.django
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 2s
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
  celery_beat:
    image: phillipjensen/payment-monitor-backend-celery-beat:latest
    command: celery -A core beat -l INFO
    env_file:
      - ./.envs/.django
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 10s
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
  postgres:
    image: postgres:13.4-alpine
    env_file:
      - ./.envs/.db
    volumes:
      - "db_data:/var/lib/postgresql/data"
    networks:
      - swarm-example
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 10s
      restart_policy:
        condition: on-failure
networks:
  swarm-example:
    driver: overlay
