FROM python:3.7-alpine
ENV PYTHONUNBUFFERED 1
# Creating working directory
RUN mkdir /monitor-backend
RUN mkdir /monitor-backend/static

# Creating Work Directory
WORKDIR /monitor-backend

COPY ./requirements.pip /scripts/


COPY ./wait-for-it.sh /wait-for-it.sh
COPY ./monitor-backend/ /monitor-backend/


RUN apk add --no-cache --virtual .build-deps \
    ca-certificates gcc postgresql-dev linux-headers musl-dev \
    libffi-dev jpeg-dev zlib-dev \
    && pip install -r /scripts/requirements.pip \
    && find /usr/local \
    \( -type d -a -name test -o -name tests \) \
    -o \( -type f -a -name '*.pyc' -o -name '*.pyo' \) \
    -exec rm -rf '{}' + \
    && runDeps="$( \
    scanelf --needed --nobanner --recursive /usr/local \
    | awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' \
    | sort -u \
    | xargs -r apk info --installed \
    | sort -u \
    )" \
    && apk add --virtual .rundeps $runDeps \
    && apk del .build-deps


CMD ["sh", "-c",  "/wait-for-it.sh postgres:5432 -- python manage.py makemigrations; python manage.py migrate; python manage.py collectstatic --no-input; daphne -u /tmp/daphne.sock -b 0.0.0.0 -p 8002 core.asgi:application"]



















# # pull official python alpine image
# FROM python:3.7-alpine

# # Set Environment Variable
# ENV PYTHONDONTWRITEBYTECODE=1
# ENV PYTHONUNBUFFERED=1

# # Making source and static directory
# RUN mkdir /monitor-backend
# RUN mkdir /monitor-backend/static

# # Creating Work Directory
# WORKDIR /monitor-backend

# # Adding mandatory packages to docker
# RUN apk update && apk add --no-cache \
#     postgresql \
#     zlib \
#     openssh-server \
#     jpeg \
#     py3-psycopg2 \
#     postgresql-dev \
#     gcc \
#     musl-dev


# # Installing temporary packages required for installing requirements.pip 
# RUN apk add --no-cache libffi-dev openssl-dev



# # Update pip

# # Installing requirements.pip from project
# COPY ./requirements.pip /scripts/
# RUN pip install --upgrade pip && pip install cryptography psycopg2-binary
# RUN pip install --no-cache-dir -r /scripts/requirements.pip

# # removing temporary packages from docker and removing cache 
# RUN find -type d -name __pycache__ -prune -exec rm -rf {} \; && \
#     rm -rf ~/.cache/pip
# COPY ./wait-for-it.sh /wait-for-it.sh
# COPY ./monitor-backend/ /monitor-backend/
# # CMD will run when this dockerfile is running
# CMD ["sh", "-c",  "/wait-for-it.sh postgres:5432 -- python manage.py makemigrations; python manage.py migrate; python manage.py collectstatic --no-input; daphne -u /tmp/daphne.sock -b 0.0.0.0 -p 8002 core.asgi:application"]